name: SemVer Release Action
description: Automates semantic versioning and release.

inputs:
  version_type:
    description: "Version type to increment (major, minor, patch, select)"
    required: true
    default: 'select'
  set_version:
    description: "Set version number explicitly (e.g., 1.2.3). Leave empty to increment."
    required: false
  trunk_branch_name:
    description: "The main branch from which releases are made."
    required: true
    default: 'main'
  ikmdevops_pat:
    description: "PAT TOKEN for IKMDevops User"
    required: true
  ikmdevops_email:
    description: "Email For IKMDevops User"
    default: 'devops@ikm.dev'
  github_token:
    description: "GitHub Token"
    required: true
  gpg_passphrase:
    description: "GPG Passphrase"
    required: true
  gpg_key:
    description: "GPG Key"
    required: true
  ossrh_username:
    description: "OSSRH USERNAME"
    required: true
  ossrh_token:
    description: "OSSRH Token"
    required: true

outputs:
  new_version:
    description: "The new version number."

runs:
  using: "composite"
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{inputs.ikmdevops_pat}}
        fetch-depth: 0  # Fetch all history to get all tags
        ref: ${{ inputs.trunk_branch_name }}
        persist-credentials: true

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '21'
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_CENTRAL_TOKEN
        gpg-private-key: ${{ inputs.gpg_key }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE

    - name: Verify SNAPSHOT Version
      shell: bash
      run: |
        CURRENT_POM_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        if [[ "$CURRENT_POM_VERSION" != *-SNAPSHOT ]]; then
          echo "ERROR: The current version in pom.xml ($CURRENT_POM_VERSION) is not a SNAPSHOT version."
          exit 1
        fi

    - name: Determine Release Version
      id: release_version
      shell: bash
      run: |
        # Remove '-SNAPSHOT' from current pom version
        CURRENT_POM_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        RELEASE_VERSION=${CURRENT_POM_VERSION%-SNAPSHOT}
        echo "Release version: $RELEASE_VERSION"
        echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT

    - name: Update Maven Project Version to Release Version
      shell: bash
      run: |
        mvn versions:set -DnewVersion=${{ steps.release_version.outputs.release_version }} -DgenerateBackupPoms=false
        echo "Project version set to release version"
        git status

    - name: Commit Release Version Change
      shell: bash
      run: |
        git config user.name "ikmdevops"
        git config user.email ${{inputs.ikmdevops_email}}
        git add pom.xml
        git commit -m "Prepare release version ${{ steps.release_version.outputs.release_version }}"
        git push origin HEAD:${{ inputs.trunk_branch_name }}

    - name: Create and Push Tag
      shell: bash
      run: |
        git tag -a v${{ steps.release_version.outputs.release_version }} -m "Release v${{ steps.release_version.outputs.release_version }}"
        git push origin v${{ steps.release_version.outputs.release_version }}
        
    - name: Create Release
      shell: bash
      id: create_release
      run: |
        curl -L \
         -X POST \
         -H "Accept: application/vnd.github+json" \
         -H "Authorization: Bearer ${{inputs.github_token}}" \
         -H "X-GitHub-Api-Version: 2022-11-28" \
         https://api.github.com/repos/${{github.repository}}/releases \
        -d '{"tag_name":"${{ steps.release_version.outputs.release_version }}","name":"Release ${{ steps.release_version.outputs.release_version }}","body":"Release ${{ steps.release_version.outputs.release_version }}","draft":false,"prerelease":false,"generate_release_notes":false}'

    - name: Output New Version
      shell: bash
      run: echo "Released version ${{ steps.release_version.outputs.release_version }}"

    - name: Checkout Code Repository
      uses: actions/checkout@v4
      if: github.event.repository.name != 'tinkar-schema' && github.event.repository.name != 'komet'
      with:
        ref: ${{ inputs.trunk_branch_name }}
        persist-credentials: true

    - name: Maven Build
      shell: bash
      if: github.event.repository.name != 'tinkar-schema' && github.event.repository.name != 'komet'
      run: |
        ./mvnw clean install -U \
         --batch-mode \
         -e \
         -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
         -Dmaven.build.cache.enabled=false \
         -PcodeQuality

    - name: Publish To OSSRH (Maven Central Staging)
      shell: bash
      if: github.event.repository.name != 'tinkar-schema' && github.event.repository.name != 'komet'
      run: |
        ./mvnw deploy -U\
            --batch-mode \
            -e \
            -U \
            -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
            -DskipTests \
            -DskipITs \
            -Dmaven.main.skip \
            -Dmaven.test.skip \
            -DrepositoryId=ossrh \
            -DrepositoryIdOSSRH='true' \
            -PstageOSSRH \
            -Dmaven.build.cache.enabled=false
         env:
           MAVEN_USERNAME: ${{ inputs.ossrh_username }}
           MAVEN_CENTRAL_TOKEN: ${{ inputs.ossrh_token }}
           MAVEN_GPG_PASSPHRASE: ${{ inputs.gpg_passphrase }}

    - name: Determine Next Snapshot Version
      id: next_snapshot_version
      shell: bash
      run: |
        VERSION_TYPE="${{ inputs.version_type }}"
        SET_VERSION="${{ inputs.set_version }}"
        RELEASE_VERSION="${{ steps.release_version.outputs.release_version }}"
        
        # Split the release version into components
        IFS='.' read -r MAJOR MINOR PATCH <<< "$RELEASE_VERSION"
        
        if [ -n "$SET_VERSION" ]; then
        # If set_version is provided, increment based on it
        NEXT_SNAPSHOT_VERSION="${SET_VERSION}-SNAPSHOT"
        else
        # Validate that version_type is one of the allowed values
        if [[ "$VERSION_TYPE" != "major" && "$VERSION_TYPE" != "minor" && "$VERSION_TYPE" != "patch" ]]; then
         echo "Invalid version_type specified: $VERSION_TYPE. Must be 'major', 'minor', or 'patch'."
         exit 1
        fi
        
        case "$VERSION_TYPE" in
         major)
           MAJOR=$((MAJOR + 1))
           MINOR=0
           PATCH=0
           ;;
         minor)
           MINOR=$((MINOR + 1))
           PATCH=0
           ;;
         patch)
           PATCH=$((PATCH + 1))
           ;;
        esac
        
        NEXT_SNAPSHOT_VERSION="${MAJOR}.${MINOR}.${PATCH}-SNAPSHOT"
        fi
        
        echo "Next snapshot version: $NEXT_SNAPSHOT_VERSION"
        echo "next_snapshot_version=$NEXT_SNAPSHOT_VERSION" >> $GITHUB_OUTPUT

    - name: Update Maven Project Version to Next Snapshot Version
      shell: bash
      run: |
        mvn versions:set -DnewVersion=${{ steps.next_snapshot_version.outputs.next_snapshot_version }} -DgenerateBackupPoms=false -DprocessAllModules
        echo "Project version set to next snapshot version"

    - name: Git Status After Version Update
      shell: bash
      run: |
        git status
        git diff

    - name: Commit Next Snapshot Version Change
      shell: bash
      run: |
        git config user.name "ikmdevops"
        git config user.email ${{inputs.ikmdevops_email}}
        git add pom.xml
        git commit -m "Prepare for next development iteration ${{ steps.next_snapshot_version.outputs.next_snapshot_version }}"
        
        # pull latest changes and rebase before pushing
        git pull --rebase origin ${{ inputs.trunk_branch_name }}
        git push origin HEAD:${{ inputs.trunk_branch_name }}

    - name: Output Release Information
      shell: bash
      run: |
        echo "Released version ${{ steps.release_version.outputs.release_version }}"
        echo "POM file updated to next snapshot version ${{ steps.next_snapshot_version.outputs.next_snapshot_version }}"
