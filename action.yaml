name: SemVer Release Version
description: Utilized for creating releases of projects

inputs:
  version_type:
    description: "Version type to increment (major, minor, patch)"
    required: true
  set_version:
    description: "Set version number explicitly (e.g., 1.2.3-SNAPSHOT). Leave empty to increment."
    required: false
  ikmdevops_pat:
    description: "PAT TOKEN for IKMDevops User"
    required: true
  ikmdevops_email:
    description: "Email For IKMDevops User"
    default: 'devops@ikm.dev'
  github_token:
    description: "GitHub Token"
    required: true
  gpg_passphrase:
    description: "GPG Passphrase"
    required: true
  gpg_key:
    description: "GPG Key"
    required: true
  ossrh_username:
    description: "OSSRH USERNAME"
    required: true
  ossrh_token:
    description: "OSSRH Token"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ inputs.ikmdevops_pat }}

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '21'
        server-id: 'ossrh'
        server-username: 'MAVEN_USERNAME'
        server-password: 'MAVEN_CENTRAL_TOKEN'
        gpg-private-key: ${{ inputs.gpg_key }}
        gpg-passphrase: 'MAVEN_GPG_PASSPHRASE'

    - name: Build Protoc Docker container
      if: ${{ github.event.repository.name == 'tinkar-schema' }}
      uses: docker/build-push-action@v6
      with:
        push: false
        context: .
        file: 'protoc.dockerfile'
        tags: 'tinkar-schema-protoc:latest'

    - name: Generate Java Code
      if: ${{ github.event.repository.name == 'tinkar-schema' }}
      shell: bash
      run: |
        sudo docker run -v "$PWD/src/main/java-generated:/home/proto-builder/src/main/java-generated" --rm tinkar-schema-protoc:latest

    - name: List Generated Java Code
      if: ${{ github.event.repository.name == 'tinkar-schema' }}
      shell: bash
      run: |
        ls src/main/java-generated

    - name: Extract Current Version
      id: get_current_version
      shell: bash
      run: |
        echo "POM_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT

    - name: Verify Snapshot Version
      if: ${{ !contains(steps.get_current_version.outputs.POM_VERSION, '-SNAPSHOT') }}
      shell: bash
      run: |
        echo "ERROR: Only SNAPSHOT versions can be released. Current version is ${{ steps.get_current_version.outputs.POM_VERSION }}."
        exit 1

    - name: Split Version Components
      id: split_version
      shell: bash
      run: |
        IFS='-' read -ra VERSION_PARTS <<< "${{ steps.get_current_version.outputs.POM_VERSION }}"
        echo "RELEASE_VERSION=${VERSION_PARTS[0]}" >> $GITHUB_OUTPUT
        IFS='.' read -ra NUMBERS <<< "${VERSION_PARTS[0]}"
        echo "MAJOR=${NUMBERS[0]}" >> $GITHUB_OUTPUT
        echo "MINOR=${NUMBERS[1]}" >> $GITHUB_OUTPUT
        echo "PATCH=${NUMBERS[2]}" >> $GITHUB_OUTPUT

    - name: Determine Next Snapshot Version
      id: next_snapshot_version
      shell: bash
      run: |
        if [ -n "${{ inputs.set_version }}" ]; then
          echo "NEXT_SNAPSHOT_VERSION=${{ inputs.set_version }}" >> $GITHUB_OUTPUT
        else
          case "${{ inputs.version_type }}" in
            major)
              NEXT_MAJOR=$((${steps.split_version.outputs.MAJOR} + 1))
              echo "NEXT_SNAPSHOT_VERSION=${NEXT_MAJOR}.0.0-SNAPSHOT" >> $GITHUB_OUTPUT
              ;;
            minor)
              NEXT_MINOR=$((${steps.split_version.outputs.MINOR} + 1))
              echo "NEXT_SNAPSHOT_VERSION=${steps.split_version.outputs.MAJOR}.${NEXT_MINOR}.0-SNAPSHOT" >> $GITHUB_OUTPUT
              ;;
            patch)
              NEXT_PATCH=$((${steps.split_version.outputs.PATCH} + 1))
              echo "NEXT_SNAPSHOT_VERSION=${steps.split_version.outputs.MAJOR}.${steps.split_version.outputs.MINOR}.${NEXT_PATCH}-SNAPSHOT" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "ERROR: Unknown version_type '${{ inputs.version_type }}'."
              exit 1
              ;;
          esac
        fi

    - name: Set Release Version
      shell: bash
      run: |
        ./mvnw versions:set -DnewVersion=${{ steps.split_version.outputs.RELEASE_VERSION }} -DgenerateBackupPoms=false

    - name: Build Release Version
      shell: bash
      run: |
        ./mvnw clean install -PcodeQuality,release-enforcement

    - name: Tag Release
      shell: bash
      run: |
        git config user.name "ikmdevops"
        git config user.email "${{ inputs.ikmdevops_email }}"
        git add .
        git commit -m "Release ${{ steps.split_version.outputs.RELEASE_VERSION }}"
        git tag -a "${{ steps.split_version.outputs.RELEASE_VERSION }}" -m "Release ${{ steps.split_version.outputs.RELEASE_VERSION }}"
        git push origin HEAD:main
        git push origin --tags

    - name: Set Next Development Version
      shell: bash
      run: |
        ./mvnw versions:set -DnewVersion=${{ steps.next_snapshot_version.outputs.NEXT_SNAPSHOT_VERSION }} -DgenerateBackupPoms=false

    - name: Commit Next Development Version
      shell: bash
      run: |
        git add .
        git commit -m "Set next development version to ${{ steps.next_snapshot_version.outputs.NEXT_SNAPSHOT_VERSION }}"
        git push origin HEAD:main

    - name: Create GitHub Release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ steps.split_version.outputs.RELEASE_VERSION }}
        release_name: "Release ${{ steps.split_version.outputs.RELEASE_VERSION }}"
        body: "Release ${{ steps.split_version.outputs.RELEASE_VERSION }}"
        draft: false
        prerelease: false
        token: ${{ inputs.github_token }}

    - name: Publish to OSSRH
      shell: bash
      if: ${{ github.event.repository.name != 'tinkar-schema' && github.event.repository.name != 'komet' }}
      env:
        MAVEN_USERNAME: ${{ inputs.ossrh_username }}
        MAVEN_CENTRAL_TOKEN: ${{ inputs.ossrh_token }}
        MAVEN_GPG_PASSPHRASE: ${{ inputs.gpg_passphrase }}
      run: |
        ./mvnw deploy
        -PstageOSSRH
        -DskipTests
        -DskipITs
        -Dmaven.build.cache.enabled=false
